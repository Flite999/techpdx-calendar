<!DOCTYPE html>
<html>
<head>
  <title>TechPDX Calendar</title>
</head>
<body>
  <div class="mx-auto max-w-screen-xl px-4 py-4 bg-grey10 sm:px-6 sm:py-12 lg:px-8">
    <div class="flex">
      <div class="w-2/3 pr-4">
        <div class="bg-white border-2 rounded-lg border-grey8">
          <div class="pb-4 pt-6 pl-4 pr-4 bg-grey10">
            <div class="mb-4">
              <p class="text-base text-grey3"> Upcoming Events </p>
            </div>
          </div>
          <div class="p-6">
            <% if @events_today.empty? %>
              <div class="mb-4">
                <p class="font-medium text-grey5"> No events today </p>
              </div>
            <% else %>
              <div class="mb-4">
                <div class="mb-2">
                  <h2 class="text-grey5 font-medium" > Today </h2>
                </div>
                <div class="grid grid-cols-4 gap-2">
                  <% @events_today.each do |date, events| %>
                    <div class="col-span-1 py-9">
                      <div class="flex flex-col">
                        <div class="text-base text-grey4 font-medium">
                          <%= date.strftime('%B %d, %Y') %>
                        </div>
                        <div class="text-sm text-grey4">
                          <%= date.strftime('%A') %>
                        </div>
                      </div>
                    </div>
                    <div class="col-span-3">
                      <ul>
                        <% events.each do |event| %>
                          <div class="border-b border-grey9">
                            <%= render partial: 'event_preview', locals: { event: event} %>
                          </div>
                        <% end %>
                      </ul>
                    </div>
                  <% end %>
                </div>
              </div>
            <% end %>
            <% if @events_tomorrow.empty? %>
              <div class="mb-4">
                <p class="font-medium text-grey5"> No events tomorrow </p>
              </div>
            <% else %>
              <div class="mb-4">
                <div class="mb-2">
                  <h2 class="text-grey5 font-medium" > Tomorrow </h2>
                </div>
                <div class="grid grid-cols-4 gap-2">
                  <% @events_tomorrow.each do |date, events| %>
                    <div class="col-span-1 py-9">
                      <div class="flex flex-col">
                        <div class="text-base text-grey4 font-medium">
                          <%= date.strftime('%B %d, %Y') %>
                        </div>
                        <div class="text-sm text-grey4">
                          <%= date.strftime('%A') %>
                        </div>
                      </div>
                    </div>
                    <div class="col-span-3">
                      <ul>
                        <% events.each do |event| %>
                          <div class="border-b border-grey9">
                            <%= render partial: 'event_preview', locals: { event: event } %>
                          </div>
                        <% end %>
                      </ul>
                    </div>
                  <% end %>
                </div>
              </div>
            <% end %>
            <% if @events_next_two_weeks.empty? %>
              <div class="mb-4">
                <p class="font-medium text-grey5"> No events the next two weeks </p>
              </div>
            <% else %>
              <div class="mb-4">
                <div class="mb-2">
                  <h2 class="text-grey5 font-medium" > Next Two Weeks </h2>
                </div>
                <div class="grid grid-cols-4 gap-2">
                  <% @events_next_two_weeks.each do |date, events| %>
                      <div class="col-span-1 py-9">
                        <div class="flex flex-col">
                          <div class="text-base text-grey4 font-medium">
                            <%= date.strftime('%B %d, %Y') %>
                          </div>
                          <div class="text-sm text-grey4">
                            <%= date.strftime('%A') %>
                          </div>
                        </div>
                      </div>
                    <div class="col-span-3">
                      <ul>
                        <% events.each do |event| %>
                          <div class="border-b border-grey9">
                            <%= render partial: 'event_preview', locals: { event: event } %>
                          </div>
                        <% end %>
                      </ul>
                    </div>
                  <% end %>
                </div>
              </div>
            <% end %>
          </div>
          <div class="p-6">
            <p class="text-lg text-green2 sm:text-xl">
              <%= link_to 'All Events' , all_events_path %>
            </p>
          </div>
        </div>
      </div>
      <div class="w-1/3">
        <div id="calendar" class="border-2 rounded-lg border-grey8 p-4">
          <div class="flex justify-between items-center mb-4">
            <button id="prev-month" class="text-green2 font-medium">&lt; Previous</button>
            <h2 id="current-month" class="text-base text-grey3"></h2>
            <button id="next-month" class="text-green2 font-medium">Next &gt;</button>
          </div>
          <div id="calendar-grid" class="grid grid-cols-7 gap-2">
            <!-- Calendar days will be dynamically inserted here -->
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Use a global flag to ensure we only initialize the calendar once per page load
    window.calendarInitialized = false;
    
    function initializeCalendar() {
      // Check if calendar is already initialized or if elements don't exist
      if (window.calendarInitialized) return;
      
      const calendarGrid = document.getElementById('calendar-grid');
      const currentMonth = document.getElementById('current-month');
      const prevMonthButton = document.getElementById('prev-month');
      const nextMonthButton = document.getElementById('next-month');
      
      // If any required element is missing, exit early
      if (!calendarGrid || !currentMonth || !prevMonthButton || !nextMonthButton) return;
      
      // Mark as initialized to prevent duplicate initialization
      window.calendarInitialized = true;
      
      let date = new Date();
      // Cache for event data to avoid redundant fetches
      const eventCache = {};
      let isNavigating = false;

      // Debounce function to prevent multiple rapid requests
      function debounce(func, wait) {
        let timeout;
        return function(...args) {
          const context = this;
          clearTimeout(timeout);
          timeout = setTimeout(() => func.apply(context, args), wait);
        };
      }

      // Fetch all events for a specific month in a single request
      async function fetchMonthEvents(year, month) {
        const cacheKey = `${year}-${month}`;
        
        // Return cached data if available
        if (eventCache[cacheKey]) {
          return eventCache[cacheKey];
        }
        
        // Format date for API - first and last day of month
        const firstDay = `${year}-${month + 1}-1`;
        const lastDay = `${year}-${month + 1}-${new Date(year, month + 1, 0).getDate()}`;
        
        try {
          const response = await fetch(`/events/month?start=${firstDay}&end=${lastDay}`);
          const data = await response.json();
          
          // Cache the results
          eventCache[cacheKey] = data;
          return data;
        } catch (error) {
          console.error('Error fetching events:', error);
          return { events: [] };
        }
      }

      async function renderCalendar() {
        if (isNavigating) return;
        isNavigating = true;
        
        calendarGrid.innerHTML = '';
        const year = date.getFullYear();
        const month = date.getMonth();

        currentMonth.textContent = date.toLocaleString('default', { month: 'long', year: 'numeric' });

        const firstDay = new Date(year, month, 1).getDay();
        const daysInMonth = new Date(year, month + 1, 0).getDate();

        // Fetch all events for this month in one request
        const monthEvents = await fetchMonthEvents(year, month);
        
        // Create a map of days with events for quick lookup
        const daysWithEvents = {};
        if (monthEvents && monthEvents.events) {
          monthEvents.events.forEach(event => {
            const eventDate = new Date(event.start_time);
            if (eventDate.getMonth() === month && eventDate.getFullYear() === year) {
              const day = eventDate.getDate();
              daysWithEvents[day] = true;
            }
          });
        }

        for (let i = 0; i < firstDay; i++) {
          const emptyCell = document.createElement('div');
          calendarGrid.appendChild(emptyCell);
        }

        for (let day = 1; day <= daysInMonth; day++) {
          const dayCell = document.createElement('div');
          dayCell.textContent = day;
          dayCell.className = 'text-center p-2 border rounded';

          // Highlight days with events using our cached data
          if (daysWithEvents[day]) {
            dayCell.classList.add('bg-green2', 'text-white');
          }

          calendarGrid.appendChild(dayCell);
        }
        
        isNavigating = false;
      }

      // Debounced navigation handlers
      const debouncedPrevMonth = debounce(() => {
        date.setMonth(date.getMonth() - 1);
        renderCalendar();
      }, 300);

      const debouncedNextMonth = debounce(() => {
        date.setMonth(date.getMonth() + 1);
        renderCalendar();
      }, 300);

      // Remove any existing event listeners before adding new ones
      prevMonthButton.removeEventListener('click', debouncedPrevMonth);
      nextMonthButton.removeEventListener('click', debouncedNextMonth);
      
      // Add event listeners
      prevMonthButton.addEventListener('click', debouncedPrevMonth);
      nextMonthButton.addEventListener('click', debouncedNextMonth);

      // Optional: Preload adjacent months
      async function preloadAdjacentMonths() {
        const year = date.getFullYear();
        const month = date.getMonth();
        
        // Preload previous month
        const prevMonth = month === 0 ? 11 : month - 1;
        const prevYear = month === 0 ? year - 1 : year;
        
        // Preload next month
        const nextMonth = month === 11 ? 0 : month + 1;
        const nextYear = month === 11 ? year + 1 : year;
        
        // Fetch in background
        fetchMonthEvents(prevYear, prevMonth);
        fetchMonthEvents(nextYear, nextMonth);
      }

      // Initialize calendar
      renderCalendar().then(() => {
        preloadAdjacentMonths();
      });
    }

    // Handle both regular page load and Turbo navigation
    document.addEventListener('DOMContentLoaded', initializeCalendar);
    document.addEventListener('turbo:load', initializeCalendar);
    document.addEventListener('turbo:render', initializeCalendar);
  </script>
</body>
</html>